name: CI/CD â€” Node + Flask

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-node:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/node-app/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install & Test (Node)
        working-directory: ./node-app
        run: |
          npm ci
          npm test

  test-flask:
    runs-on: ubuntu-latest
    needs: test-node
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/flask-app/requirements.txt') }}
      - name: Install deps
        working-directory: ./flask-app
        run: |
          pip install -r requirements.txt
      - name: Run migrations & tests (Flask)
        working-directory: ./flask-app
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: |
          # run migrations if you use them (optional)
          # flask db upgrade || true
          pytest -q

  build-and-push:
    runs-on: ubuntu-latest
    needs: [test-node, test-flask]
    steps:
      - uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push node-app image
        uses: docker/build-push-action@v4
        with:
          context: ./node-app
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/node-app:${{ github.sha }}

      - name: Build & push flask-app image
        uses: docker/build-push-action@v4
        with:
          context: ./flask-app
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/flask-app:${{ github.sha }}

      - name: Export image tags
        run: |
          echo "NODE_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/node-app:${{ github.sha }}" >> $GITHUB_ENV
          echo "FLASK_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/flask-app:${{ github.sha }}" >> $GITHUB_ENV

  deploy-ec2:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Start ssh-agent and add key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add remote to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to remote server (docker-compose)
        run: |
          ssh -o StrictHostKeyChecking=yes ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          cd /home/ubuntu/app               # path on remote where docker-compose.yml lives
          # update images in docker-compose.yml or use image tags in env
          docker-compose pull
          docker-compose up -d --remove-orphans
          EOF

  
