name: CI/CD — Node + Flask

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # 1️⃣ Run Node.js Tests
  test-node:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/nodejs-frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install & Test (Node)
        working-directory: ./nodejs-frontend
        run: |
          npm install
          npm test

  # 2️⃣ Run Flask Tests
  test-flask:
    runs-on: ubuntu-latest
    needs: test-node
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/flask-backend/requirements.txt') }}
      - name: Install deps
        working-directory: ./flask-backend
        run: |
          pip install -r requirements.txt
      - name: Run migrations & tests (Flask)
        working-directory: ./flask-backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: |
          pytest -q

  # 3️⃣ Build & Push Docker Images
  build-and-push:
    runs-on: ubuntu-latest
    needs: [test-node, test-flask]
    steps:
      - uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & push nodejs-frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./nodejs-frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/nodejs-frontend:${{ github.sha }}

      - name: Build & push flask-backend image
        uses: docker/build-push-action@v4
        with:
          context: ./flask-backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/flask-backend:${{ github.sha }}

      - name: Export image tags
        run: |
          echo "NODE_IMAGE=${{ secrets.DOCKER_USERNAME }}/nodejs-frontend:${{ github.sha }}" >> $GITHUB_ENV
          echo "FLASK_IMAGE=${{ secrets.DOCKER_USERNAME }}/flask-backend:${{ github.sha }}" >> $GITHUB_ENV

  # 4️⃣ Deploy to EC2
  deploy-ec2:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Start ssh-agent and add key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Add remote to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to remote server (docker-compose)
        run: |
          ssh -o StrictHostKeyChecking=yes ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          cd /home/ubuntu/sample_k8s

          # Set latest image tags in .env
          echo "NODE_IMAGE=${{ env.NODE_IMAGE }}" > .env
          echo "FLASK_IMAGE=${{ env.FLASK_IMAGE }}" >> .env

          # Stop and remove old containers (and optionally volumes)
          docker-compose down -v

          # Pull latest images
          docker-compose pull

          docker-compose run --rm flask-backend flask db upgrade   # runs migrations

          # Start containers fresh
          docker-compose up -d --remove-orphans
          EOF
